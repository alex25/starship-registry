
services:
  # Service for your Java application
  app:
    build:
      context: .                     # Use the Dockerfile in the current directory
      dockerfile: Dockerfile         # Name of the Dockerfile
    container_name: starship-app     # Container name
    ports:
      - "8081:8081"                  # Application port
      - "8082:8082"
    environment:
      - TZ=America/Argentina/Buenos_Aires
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_REDIS_HOST=redis
      - SPRING_PROFILES_ACTIVE=dev  # Spring Boot active profile
    depends_on:
      - redis                        # Ensure Redis is available before starting the app
      - rabbitmq                     # Ensure RabbitMQ is available before starting the app
      - keycloak                     # Ensure Keycloak is available before starting the app
      - apigateway                   # Ensure apigateway is available before starting the app
    networks:
      - starship-network             # Common network for all services

  # Service for apigateway
  apigateway:
    build:
      context: ./apigateway/.        # Use the Dockerfile in the current directory
      dockerfile: Dockerfile         # Name of the Dockerfile
    container_name: apigateway-app     # Container name
    ports:
      - "8888:8888"                  # Application port
      - "8887:8887" 
    environment:
      - TZ=America/Argentina/Buenos_Aires
      - KEYCLOAK_SERVICE_URI=http://keycloak:8080 # Keycloak uri
      - STARSHIP_SERVICE_URI=http://app:8081 # Starship-registry uri
      - APP_PORT=8888  # Spring Boot active profile
    networks:
      - starship-network             # Common network for all services

  # Service for Redis
  redis:
    image: redis:latest                  # Official Redis image
    container_name: starship-redis   # Container name
    environment:
      - TZ=America/Argentina/Buenos_Aires
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    volumes:
    - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - starship-network             # Common network for all services

  # Service for RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management     # Official RabbitMQ image with management UI
    container_name: starship-rabbitmq # Container name
    ports:
      - "5672:5672"                  # RabbitMQ port for messaging
      - "15672:15672"                # RabbitMQ management web interface port
    environment:
      - TZ= America/Argentina/Buenos_Aires
      - RABBITMQ_DEFAULT_USER=admin             # Usuario personalizado
      - RABBITMQ_DEFAULT_PASS=admin123          # Contraseña personalizada
    volumes:
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf # Archivo de configuración 
    networks:
      - starship-network             # Common network for all services

  # Service for Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1 # Official Keycloak image
    container_name: starship-keycloak       # Container name
    ports:
      - "8080:8080"                         # Keycloak port 
    environment:
      TZ: America/Argentina/Buenos_Aires
      KEYCLOAK_ADMIN: admin                 # Keycloak admin user
      KEYCLOAK_ADMIN_PASSWORD: admin        # Keycloak admin password
      KC_HTTP_ENABLED: true                 # Enable HTTP (use HTTPS in production)
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
    volumes:
      - ./apigateway/config/realm-dev.json:/opt/keycloak/data/import/realm-dev.json
    command:
      - start-dev                           # Development mode (do not use in production)
      - --import-realm
    networks:
      - starship-network                    # Common network for all services

# Network configuration
networks:
  starship-network:
    driver: bridge                          # Bridge network type for communication between containers